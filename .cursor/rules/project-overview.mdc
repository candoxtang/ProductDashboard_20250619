---
description:
globs:
alwaysApply: false
---
# Project Overview

This document provides a high-level overview of the Product Costing Dashboard application.

## Core Architecture

The application is a single-page application (SPA) built with vanilla HTML, CSS, and JavaScript. It uses Chart.js for data visualization. The architecture is modular and event-driven.

### Key Files & Directories

*   **`index.html`**: The main HTML file. It defines the application's structure, including the navigation tabs and the `<canvas>` elements for all charts.
*   **`js/`**: Contains all JavaScript source code.
*   **`js/main.js`**: The main application controller. It handles tab switching and initializes the JavaScript module for the active tab.
*   **`js/data-source.js`**: **This is the most critical file.** It simulates and generates all the data used throughout the application. When data generation is complete, it dispatches a global `dataReady` event. The entire application is dormant until this event is fired.
*   **`js/global-filters.js`**: Manages the state of the global filter bar. It dispatches a `globalFiltersChanged` event whenever a filter setting is updated by the user.
*   **`js/chart-utils.js`**: A library of shared functions for creating and manipulating charts, including color palettes and number formatting.
*   **Dashboard Modules**: Each tab has a corresponding JavaScript file (e.g., `[js/material-analysis.js](mdc:js/material-analysis.js)`, `[js/manufacturing-dashboard.js](mdc:js/manufacturing-dashboard.js)`). These files are responsible for all logic and charting within their respective tabs.
*   **`data/`**: This directory is intended to hold data files, although the current implementation generates data programmatically.

## Entry Point
The main entry point for the application is [`index.html`](mdc:index.html). It loads the necessary CSS stylesheets and all JavaScript modules.

## Core Application Logic
The core application logic is organized into several key files within the `js/` directory:

- **Data Generation**: All application data is dynamically generated by [`js/data-source.js`](mdc:js/data-source.js) on page load. Additional static data is sourced from [`js/new_costing_data.js`](mdc:js/new_costing_data.js).
- **Charting**: The application uses Chart.js. The main chart implementations are in:
    - [`js/charts.js`](mdc:js/charts.js) for the Manufacturing dashboard.
    - [`js/org-costing.js`](mdc:js/org-costing.js) for the Organizational Costing dashboard.
- **UI & Filtering**: Global filters and UI interactions are managed by [`js/global-filters.js`](mdc:js/global-filters.js).
- **Utilities**:
    - [`js/chart-utils.js`](mdc:js/chart-utils.js) provides common helpers for chart styling and formatting.
    - [`js/date-utils.js`](mdc:js/date-utils.js) provides functions for date manipulation and data aggregation.

## Recent Major Development: Cost Category Analysis

### Overview
The Cost Category Analysis page represents the most comprehensive and recent development in the application, featuring:
- **Multi-dimensional Analysis**: Four analysis modes (Product, Lot, Stage, Process Area)
- **Advanced Data Grid**: Thousands of manufacturing lot records with real-time filtering
- **Interactive Charts**: Multi-selection plan vs actual cost analysis with drill-down capabilities
- **Integrated Filtering**: Chart selections automatically filter the data grid

### Key Achievements
1. **Data Architecture Enhancement**: Extended data generation pipeline with lot-level and MES operation data
2. **UI Layout Optimization**: Moved analyze-by dropdown to global filter panel, removed redundant headers
3. **Realistic Cost Modeling**: Implemented technology-based cost standards (65nm: $125K, 45nm: $250K, 28nm: $65K)
4. **Performance Optimization**: Efficient handling of large datasets with pagination and debounced filtering

### Technical Innovation
- **Enhanced Data Pipeline**: [data-source.js](mdc:js/data-source.js) → [data-generators.js](mdc:js/data-generators.js) → [data.js](mdc:js/data.js) → [cost-category-analysis.js](mdc:js/cost-category-analysis.js)
- **Mathematical Consistency**: Ensured lot costs align with daily summaries through lookup-based generation
- **Advanced Grid Features**: Sortable columns, real-time search, status filtering, dynamic headers

## Startup Flow
The application uses an event-driven model to prevent race conditions. Enhanced with `enhancedDataReady` event for lot/MES data. See the `startup-data-flow.mdc` rule for more details.
