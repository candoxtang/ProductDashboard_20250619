---
description:
globs:
alwaysApply: false
---
# Rule: Consistent Pagination Controls

**Goal**: To ensure all paginated views in the application use a single, consistent, and reusable styling and logic.

## Requirements:

1.  **Use the Centralized Function**: All pagination controls **must** be generated by the `window.chartUtils.renderPaginationControls` function located in `js/chart-utils.js`. Do not implement custom pagination logic elsewhere.

2.  **Standard 4-Button Layout**: The pagination control must always include four buttons for navigation, using the following icons for a compact layout:
    *   `«` (First Page)
    *   `‹` (Previous Page)
    *   `›` (Next Page)
    *   `»` (Last Page)

3.  **Required HTML and CSS**:
    *   The container for the pagination controls must be a `<div>` and have the class `pagination-controls`.
    *   The page info text should be in a `<span>` with the class `page-info`.
    *   All styling is defined in `css/style.css` under the `/* --- Pagination Controls --- */` section. Do not add custom inline styles or new CSS rules for pagination.

4.  **Implementation Pattern**:
    *   In the specific chart/view logic file (e.g., `js/charts.js` or `js/org-costing.js`), create a `handlePageChange(newPage)` function to manage the component's state (e.g., `currentPage`).
    *   Create a `renderPagination()` function that is responsible for gathering the current state (e.g., `totalPages`) and calling the shared utility like so:
    ```javascript
    window.chartUtils.renderPaginationControls(container, currentPage, totalPages, handlePageChange);
    ```
